
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f5  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069a  00000000  00000000  000009e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030c  00000000  00000000  0000107b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001388  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000373  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000160  00000000  00000000  0000171f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000187f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB = 0b00000000;
  80:	14 b8       	out	0x04, r1	; 4
	DDRD = 0b11111111;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a b9       	out	0x0a, r24	; 10
			PORTD = 0b00000000;
		}
		
		else if ((ls1 == 0b00000000)  && (rs1 == 0b00000010))
		{
			PORTD = 0b0000001;
  86:	71 e0       	ldi	r23, 0x01	; 1
			PORTD = 0b00000000;
		}
		
		else if ((ls1 == 0b00000001)  && (rs1 == 0b00000000))
		{
			PORTD = 0b00001000;
  88:	68 e0       	ldi	r22, 0x08	; 8
		br  = PINB & 0b01000000;
		
		
		if ((ls1 == 0b00000001)  && (rs1 == 0b00000010))
		{
			PORTD = 0b00001001;
  8a:	e9 e0       	ldi	r30, 0x09	; 9
	DDRD = 0b11111111;

	int ls1, rs1,fl,fr,bl,br;
	while (1)
	{
		ls1 = PINB & 0b00000001;
  8c:	23 b1       	in	r18, 0x03	; 3
		rs1 = PINB & 0b00000010;
  8e:	83 b1       	in	r24, 0x03	; 3
  90:	82 70       	andi	r24, 0x02	; 2
  92:	90 e0       	ldi	r25, 0x00	; 0
		fl  = PINB & 0b00000100;
  94:	33 b1       	in	r19, 0x03	; 3
		fr  = PINB & 0b00010000;
  96:	33 b1       	in	r19, 0x03	; 3
		bl  = PINB & 0b00100000;
  98:	33 b1       	in	r19, 0x03	; 3
		br  = PINB & 0b01000000;
  9a:	33 b1       	in	r19, 0x03	; 3
		
		
		if ((ls1 == 0b00000001)  && (rs1 == 0b00000010))
  9c:	42 2f       	mov	r20, r18
  9e:	41 70       	andi	r20, 0x01	; 1
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	20 ff       	sbrs	r18, 0
  a4:	0c c0       	rjmp	.+24     	; 0xbe <main+0x3e>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	91 05       	cpc	r25, r1
  aa:	09 f5       	brne	.+66     	; 0xee <main+0x6e>
		{
			PORTD = 0b00001001;
  ac:	eb b9       	out	0x0b, r30	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	83 ec       	ldi	r24, 0xC3	; 195
  b0:	99 e0       	ldi	r25, 0x09	; 9
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x32>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x38>
  b8:	00 00       	nop
			_delay_ms(10);
			PORTD = 0b00000000;
  ba:	1b b8       	out	0x0b, r1	; 11
  bc:	e7 cf       	rjmp	.-50     	; 0x8c <main+0xc>
			
		}
		
		else if ((ls1 == 0b00000000)  && (rs1 == 0b00000000))
  be:	45 2b       	or	r20, r21
  c0:	29 f7       	brne	.-54     	; 0x8c <main+0xc>
  c2:	00 97       	sbiw	r24, 0x00	; 0
  c4:	49 f4       	brne	.+18     	; 0xd8 <main+0x58>
		{
			PORTD = 0b00000000;
  c6:	1b b8       	out	0x0b, r1	; 11
  c8:	83 ec       	ldi	r24, 0xC3	; 195
  ca:	99 e0       	ldi	r25, 0x09	; 9
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x4c>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x52>
  d2:	00 00       	nop
			_delay_ms(10);
			PORTD = 0b00000000;
  d4:	1b b8       	out	0x0b, r1	; 11
  d6:	da cf       	rjmp	.-76     	; 0x8c <main+0xc>
		}
		
		else if ((ls1 == 0b00000000)  && (rs1 == 0b00000010))
  d8:	02 97       	sbiw	r24, 0x02	; 2
  da:	c1 f6       	brne	.-80     	; 0x8c <main+0xc>
		{
			PORTD = 0b0000001;
  dc:	7b b9       	out	0x0b, r23	; 11
  de:	83 ec       	ldi	r24, 0xC3	; 195
  e0:	99 e0       	ldi	r25, 0x09	; 9
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x62>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x68>
  e8:	00 00       	nop
			_delay_ms(10);
			PORTD = 0b00000000;
  ea:	1b b8       	out	0x0b, r1	; 11
  ec:	cf cf       	rjmp	.-98     	; 0x8c <main+0xc>
		}
		
		else if ((ls1 == 0b00000001)  && (rs1 == 0b00000000))
  ee:	89 2b       	or	r24, r25
  f0:	69 f6       	brne	.-102    	; 0x8c <main+0xc>
		{
			PORTD = 0b00001000;
  f2:	6b b9       	out	0x0b, r22	; 11
  f4:	83 ec       	ldi	r24, 0xC3	; 195
  f6:	99 e0       	ldi	r25, 0x09	; 9
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x78>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x7e>
  fe:	00 00       	nop
			_delay_ms(10);
			PORTD = 0b00000000;
 100:	1b b8       	out	0x0b, r1	; 11
 102:	c4 cf       	rjmp	.-120    	; 0x8c <main+0xc>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
